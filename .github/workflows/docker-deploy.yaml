name: Docker Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: partyserver/storagefrontend:latest

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Get Portainer Endpoint ID
      env:
        PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
        PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
        PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
      run: |
        JWT=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username": "'$PORTAINER_USERNAME'", "password": "'$PORTAINER_PASSWORD'"}' $PORTAINER_URL/api/auth | jq -r .jwt)
        echo "JWT: $JWT"
        ENDPOINTS=$(curl -s -X GET -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" $PORTAINER_URL/api/endpoints)
        echo "Endpoints: $ENDPOINTS"
        ENDPOINT_ID=$(echo $ENDPOINTS | jq -r '.[0].Id') # Assuming the first endpoint is the desired one
        echo "Endpoint ID: $ENDPOINT_ID"
        echo "ENDPOINT_ID=$ENDPOINT_ID" >> $GITHUB_ENV

    - name: Clean up old container and image
      env:
        PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
        PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
        PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
        ENDPOINT_ID: ${{ env.ENDPOINT_ID }}
      run: |
        JWT=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username": "'$PORTAINER_USERNAME'", "password": "'$PORTAINER_PASSWORD'"}' $PORTAINER_URL/api/auth | jq -r .jwt)
        echo "JWT: $JWT"
        # Remove existing container if it exists
        EXISTING_CONTAINER=$(curl -s -X GET "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/containers/json?all=true" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" | jq -r '.[] | select(.Names[] | contains("my-container")) | .Id')
        if [ -n "$EXISTING_CONTAINER" ]; then
          echo "Removing existing container: $EXISTING_CONTAINER"
          STOP_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER/stop" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
          echo "Stop response: $STOP_RESPONSE"
          DELETE_RESPONSE=$(curl -s -X DELETE "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/containers/$EXISTING_CONTAINER?force=true" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
          echo "Delete response: $DELETE_RESPONSE"
        else
          echo "No existing container found with name: my-container"
        fi
        # Remove existing image if it exists
        EXISTING_IMAGE=$(curl -s -X GET "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/images/json" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" | jq -r '.[] | select(.RepoTags[] | contains("partyserver/storagefrontend:latest")) | .Id')
        if [ -n "$EXISTING_IMAGE" ]; then
          echo "Removing existing image: $EXISTING_IMAGE"
          DELETE_IMAGE_RESPONSE=$(curl -s -X DELETE "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/images/$EXISTING_IMAGE?force=true" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
          echo "Delete image response: $DELETE_IMAGE_RESPONSE"
        else
          echo "No existing image found with name: partyserver/storagefrontend:latest"
        fi

    - name: Deploy to Portainer
      env:
        PORTAINER_URL: ${{ secrets.PORTAINER_URL }}
        PORTAINER_USERNAME: ${{ secrets.PORTAINER_USERNAME }}
        PORTAINER_PASSWORD: ${{ secrets.PORTAINER_PASSWORD }}
        ENDPOINT_ID: ${{ env.ENDPOINT_ID }}
      run: |
        JWT=$(curl -s -X POST -H "Content-Type: application/json" -d '{"username": "'$PORTAINER_USERNAME'", "password": "'$PORTAINER_PASSWORD'"}' $PORTAINER_URL/api/auth | jq -r .jwt)
        echo "JWT: $JWT"
        IMAGE_CREATE_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/images/create?fromImage=partyserver/storagefrontend&tag=latest" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
        echo "Image create response: $IMAGE_CREATE_RESPONSE"
        CONTAINER=$(curl -s -X POST "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/containers/create?name=my-container" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json" -d '{
          "Image": "partyserver/storagefrontend:latest",
          "HostConfig": {
            "PortBindings": {
              "80/tcp": [{"HostPort": "8080"}]
            }
          },
          "ExposedPorts": {
            "80/tcp": {}
          }
        }')
        echo "Container Create Response: $CONTAINER"
        CONTAINER_ID=$(echo $CONTAINER | jq -r '.Id')
        echo "Container ID: $CONTAINER_ID"
        START_RESPONSE=$(curl -s -X POST "$PORTAINER_URL/api/endpoints/$ENDPOINT_ID/docker/containers/$CONTAINER_ID/start" -H "Authorization: Bearer $JWT" -H "Content-Type: application/json")
        echo "Start response: $START_RESPONSE"
